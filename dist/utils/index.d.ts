import type { JwtService } from "@nestjs/jwt";
import type { Account } from "@prisma/client";
import type { Response } from "express";
import type { PrismaService } from "src/prisma.service";
import type { PrismaResultError } from "src/types";
export declare const handleError: (error: unknown) => PrismaResultError;
export declare const isPrismaResultError: (object: any) => object is PrismaResultError;
export declare const noRequestAccountError: () => PrismaResultError;
export declare const noFileReceivedError: () => PrismaResultError;
export declare const accountIsUnauthorized: () => PrismaResultError;
export declare const invalidDayJsDate: () => PrismaResultError;
export declare const getAccountInfoFromId: (prisma: PrismaService, id: number) => Promise<Account | PrismaResultError>;
export declare const isAccountAdminRole: (prisma: PrismaService, account: Account) => Promise<boolean>;
export declare const isAccountSecurityRole: (prisma: PrismaService, account: Account) => Promise<boolean>;
export declare const isAccountVenueManagerRole: (prisma: PrismaService, account: Account) => Promise<boolean>;
export declare const addJwtCookieToRequest: (response: Response, jwtService: JwtService, accountId: number, accountEmail: string) => Promise<void>;
export declare const capitalizeString: (text: string) => string;
export declare const compressImage: (imageToCompress: Express.Multer.File, directoryToSaveImage: string) => Promise<string>;
